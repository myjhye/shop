# EC2 내부에 MySQL 컨테이너를 직접 실행하는 docker-compose.yml
version: '3.8'

services:
  # --- 1. MySQL 데이터베이스 서비스 (EC2 내부에서 직접 실행) ---
  db:
    image: mysql:8.0
    ports:
      - "3307:3306" # EC2 서버의 3307번 포트를 컨테이너의 3306 포트로 연결
    container_name: shop-mysql-db-local
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: shop
      TZ: Asia/Seoul
    volumes:
      - db-data:/var/lib/mysql
    # healthcheck를 추가하여 백엔드가 DB 준비 완료 후 시작되도록 보장합니다.
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # --- 2. 백엔드 Spring Boot 애플리케이션 서비스 ---
  backend:
    build: ./backend
    container_name: shop-backend-app
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy # db 서비스가 완전히 준비된 후에 backend가 시작됩니다.
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # 데이터베이스 호스트를 외부 RDS가 아닌, 바로 위에서 정의한 'db' 서비스 이름으로 변경합니다.
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/shop?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
      # EC2 내부의 MySQL이므로 사용자 이름을 'root'로 변경합니다.
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      APP_JWT_SECRET: ${APP_JWT_SECRET}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    networks:
      - app-network

  # --- 3. 프론트엔드 React (Nginx) 웹 서버 서비스 ---
  frontend:
    build: ./frontend
    container_name: shop-frontend-web
    restart: always
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network

# MySQL 데이터베이스의 데이터를 영구적으로 보관하기 위한 볼륨 설정
volumes:
  db-data:

networks:
  app-network:
    driver: bridge